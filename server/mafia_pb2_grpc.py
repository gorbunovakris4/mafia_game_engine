# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """A simple key-value store service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/Mafia/Connect',
                request_serializer=mafia__pb2.ConnectRequest.SerializeToString,
                response_deserializer=mafia__pb2.ConnectResult.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/Mafia/Disconnect',
                request_serializer=mafia__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=mafia__pb2.DisconnectRequest.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/Mafia/GetStatus',
                request_serializer=mafia__pb2.StatusRequest.SerializeToString,
                response_deserializer=mafia__pb2.Status.FromString,
                )
        self.GetRole = channel.unary_unary(
                '/Mafia/GetRole',
                request_serializer=mafia__pb2.RoleRequest.SerializeToString,
                response_deserializer=mafia__pb2.Role.FromString,
                )
        self.GetTime = channel.unary_unary(
                '/Mafia/GetTime',
                request_serializer=mafia__pb2.TimeRequest.SerializeToString,
                response_deserializer=mafia__pb2.Time.FromString,
                )
        self.GetGameInfo = channel.unary_unary(
                '/Mafia/GetGameInfo',
                request_serializer=mafia__pb2.GameInfoRequest.SerializeToString,
                response_deserializer=mafia__pb2.GameInfo.FromString,
                )
        self.CreateAction = channel.unary_unary(
                '/Mafia/CreateAction',
                request_serializer=mafia__pb2.ActionRequest.SerializeToString,
                response_deserializer=mafia__pb2.ActionResult.FromString,
                )
        self.GetHistory = channel.unary_unary(
                '/Mafia/GetHistory',
                request_serializer=mafia__pb2.HistoryRequest.SerializeToString,
                response_deserializer=mafia__pb2.History.FromString,
                )


class MafiaServicer(object):
    """A simple key-value store service.
    """

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=mafia__pb2.ConnectRequest.FromString,
                    response_serializer=mafia__pb2.ConnectResult.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=mafia__pb2.DisconnectRequest.FromString,
                    response_serializer=mafia__pb2.DisconnectRequest.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=mafia__pb2.StatusRequest.FromString,
                    response_serializer=mafia__pb2.Status.SerializeToString,
            ),
            'GetRole': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRole,
                    request_deserializer=mafia__pb2.RoleRequest.FromString,
                    response_serializer=mafia__pb2.Role.SerializeToString,
            ),
            'GetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTime,
                    request_deserializer=mafia__pb2.TimeRequest.FromString,
                    response_serializer=mafia__pb2.Time.SerializeToString,
            ),
            'GetGameInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameInfo,
                    request_deserializer=mafia__pb2.GameInfoRequest.FromString,
                    response_serializer=mafia__pb2.GameInfo.SerializeToString,
            ),
            'CreateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAction,
                    request_deserializer=mafia__pb2.ActionRequest.FromString,
                    response_serializer=mafia__pb2.ActionResult.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=mafia__pb2.HistoryRequest.FromString,
                    response_serializer=mafia__pb2.History.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """A simple key-value store service.
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Connect',
            mafia__pb2.ConnectRequest.SerializeToString,
            mafia__pb2.ConnectResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Disconnect',
            mafia__pb2.DisconnectRequest.SerializeToString,
            mafia__pb2.DisconnectRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetStatus',
            mafia__pb2.StatusRequest.SerializeToString,
            mafia__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetRole',
            mafia__pb2.RoleRequest.SerializeToString,
            mafia__pb2.Role.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetTime',
            mafia__pb2.TimeRequest.SerializeToString,
            mafia__pb2.Time.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGameInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetGameInfo',
            mafia__pb2.GameInfoRequest.SerializeToString,
            mafia__pb2.GameInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/CreateAction',
            mafia__pb2.ActionRequest.SerializeToString,
            mafia__pb2.ActionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetHistory',
            mafia__pb2.HistoryRequest.SerializeToString,
            mafia__pb2.History.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
